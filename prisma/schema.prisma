// This is a Prisma schema file for PawPal - a pet rehoming and social media application
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model - core user information
model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  username           String              @unique
  password           String
  firstName          String
  lastName           String
  bio                String?             @db.Text
  isVerified         Boolean             @default(false)
  isEmailVerified    Boolean             @default(false)
  verificationCode   String?
  verificationLevel  VerificationLevel   @default(BASIC)
  role               UserRole            @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  petProfiles        PetProfile[]
  socialPosts        SocialPost[]
  adoptionPosts      PetAdoptionPost[]
  comments           Comment[]
  reactions          Reaction[]
  followers          Follow[]            @relation("follower")
  following          Follow[]            @relation("following")
  sentMessages       Message[]           @relation("sender")
  receivedMessages   Message[]           @relation("receiver")
  notifications      Notification[]      @relation("notificationReceiver")
  sentNotifications  Notification[]      @relation("notificationSender")
  verificationDocs   VerificationDocument[]
  petApplications    AdoptionApplication[] @relation("applicant")
  receivedApplications AdoptionApplication[] @relation("petOwner")
  ownedChats         Chat[]              @relation("chatOwner")
  participatedChats  ChatParticipant[]
  userVerifications  UserVerification[]
  FullAddress        FullAddress[]
  profile            Profile[]
  coverPicture       CoverPicture[]
  favorites          Favorite[]          // New relation for favorites
  SavedPost          SavedPost[]
  
  // Clinic, posts and products relations
  clinics            Clinic[]           // Vet users can manage clinics
  vetPosts           VetPost[]          // Vet educational posts
  petTips            PetTip[]           // Pet health tips
  products           PetProduct[]       // Pet products
  clinicUpdates      ClinicUpdate[]     // Clinic updates/announcements
  vetDocuments       VetDocument[]      // Vet licenses and certificates
  verifiedMedicalRecords MedicalRecord[] // Medical records verified by this user
}

model Profile {
  id                 String    @id @default(uuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profilePictureUrl     String?
}

model CoverPicture {
  id                 String    @id @default(uuid())
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  coverPictureUrl    String?
}

model FullAddress {
  id                 String    @id @default(uuid())
  address            String
  city               String
  state              String
  zipCode            String
  user               User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String?
  clinic             Clinic?           @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  clinicId           String?

  @@index([clinicId])
}

// Clinic model - for veterinary clinics
model Clinic {
  id                 String    @id @default(uuid())
  name               String
  description        String?   @db.Text
  phone              String?
  email              String?
  website            String?
  operatingHours     String?
  verificationStatus VerificationStatus @default(PENDING)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  profilePictureUrl  String?
  coverPictureUrl    String?
  // Relations
  ownerId            String    // Clinic owner (vet or admin)
  owner              User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  address            FullAddress[]
  vetPosts           VetPost[]
  petTips            PetTip[]
  products           PetProduct[]
  updates            ClinicUpdate[]
  
  @@index([ownerId])
  ClinicImage        ClinicImage[]
}

model ClinicImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  clinicId           String
  clinic             Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  @@index([clinicId])
}

// Vet Posts - educational content by veterinarians
model VetPost {
  id                 String    @id @default(uuid())
  title              String
  content            String    @db.Text
  isPublished        Boolean   @default(true)
  isFeatured         Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  authorId           String    // Vet who created the post
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  clinicId           String?   // Optional association with a clinic
  clinic             Clinic?   @relation(fields: [clinicId], references: [id], onDelete: SetNull)
  
  @@index([authorId])
  @@index([clinicId])
  VetPostImage       VetPostImage[]
  categories         VetPostCategory[] @relation("PostCategories")
}

model VetPostImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  vetPostId          String
  vetPost            VetPost   @relation(fields: [vetPostId], references: [id], onDelete: Cascade)
  
  @@index([vetPostId])
}

model VetPostCategory {
  id                 String    @id @default(uuid())
  name               String    @unique
  description        String?   @db.Text
  posts              VetPost[] @relation("PostCategories")
}

// Pet Health Tips
model PetTip {
  id                 String    @id @default(uuid())
  title              String
  content            String    @db.Text
  species            PetSpecies?  // Optional targeting for specific species
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  authorId           String
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  clinicId           String?
  clinic             Clinic?   @relation(fields: [clinicId], references: [id], onDelete: SetNull)
  
  @@index([authorId])
  @@index([clinicId])
  PetTipImage        PetTipImage[]
}

model PetTipImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  petTipId           String
  petTip             PetTip    @relation(fields: [petTipId], references: [id], onDelete: Cascade)
  
  @@index([petTipId])
}

// Pet Products
model PetProduct {
  id                 String    @id @default(uuid())
  name               String
  description        String    @db.Text
  price              Decimal   @db.Decimal(10, 2)
  isAvailable        Boolean   @default(true)
  category           ProductCategory
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  sellerId           String
  seller             User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  clinicId           String?
  clinic             Clinic?   @relation(fields: [clinicId], references: [id], onDelete: SetNull)
  
  @@index([sellerId])
  @@index([clinicId])
  ProductImage       ProductImage[]
}

model ProductImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  productId          String
  product            PetProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

// Clinic Updates and Announcements
model ClinicUpdate {
  id                 String    @id @default(uuid())
  title              String
  content            String    @db.Text
  isImportant        Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  authorId           String
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  clinicId           String
  clinic             Clinic    @relation(fields: [clinicId], references: [id], onDelete: Cascade)
  
  @@index([authorId])
  @@index([clinicId])
  UpdateImage        UpdateImage[]
}

model UpdateImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  updateId           String
  update             ClinicUpdate @relation(fields: [updateId], references: [id], onDelete: Cascade)
  
  @@index([updateId])
}

// Pet Profile model - for managing pet information
model PetProfile {
  id                 String    @id @default(uuid())
  name               String
  species            PetSpecies
  breed              String?
  age                Int?
  gender             PetGender?
  size               PetSize?
  color              String?
  description        String?   @db.Text
  profilePicture     String?
  isAdoptable        Boolean   @default(false)
  isFeatured         Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  ownerId            String
  owner              User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  medicalRecords     MedicalRecord[]
  adoptionPosts      PetAdoptionPost[] // Relation to adoption posts
  favorites          Favorite[]        // Relation to favorites
  socialPosts        SocialPost[]      @relation("petTagged") // Relation to social posts

  @@index([ownerId])
}

// Social Post model - for social media functionality
model SocialPost {
  id                 String    @id @default(uuid())
  content            String    @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  authorId           String
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  taggedPets         PetProfile[] @relation("petTagged")
  comments           Comment[]
  reactions          Reaction[]
  favorites          Favorite[]  // Relation to favorites

  @@index([authorId])
  SocialPostImage SocialPostImage[]

  SavedPost SavedPost[]
}

model SocialPostImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  socialPostId       String
  socialPost         SocialPost @relation(fields: [socialPostId], references: [id], onDelete: Cascade)
}

// Pet Adoption Post model - specifically for pet adoption
model PetAdoptionPost {
  id                 String    @id @default(uuid())
  title              String
  description        String    @db.Text
 
  location           String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  authorId           String
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  petProfileId       String?
  petProfile         PetProfile? @relation(fields: [petProfileId], references: [id], onDelete: SetNull)
  applications       AdoptionApplication[]
  favorites          Favorite[]  // Relation to favorites

  @@index([authorId])
  @@index([petProfileId])
  PetAdoptionPostImage PetAdoptionPostImage[]
}

model PetAdoptionPostImage {
  id                 String    @id @default(uuid())
  imageUrl           String
  petAdoptionPostId  String
  petAdoptionPost    PetAdoptionPost @relation(fields: [petAdoptionPostId], references: [id], onDelete: Cascade)
}
// Favorite model - for saving posts and pets
model Favorite {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  
  // Relations
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  petProfileId       String?
  petProfile         PetProfile? @relation(fields: [petProfileId], references: [id], onDelete: Cascade)
  socialPostId       String?
  socialPost         SocialPost? @relation(fields: [socialPostId], references: [id], onDelete: Cascade)
  adoptionPostId     String?
  adoptionPost       PetAdoptionPost? @relation(fields: [adoptionPostId], references: [id], onDelete: Cascade)

  @@unique([userId, petProfileId])
  @@unique([userId, socialPostId])
  @@unique([userId, adoptionPostId])
  @@index([userId])
  @@index([petProfileId])
  @@index([socialPostId])
  @@index([adoptionPostId])
}

// Saved Post model - for saving posts to read later
model SavedPost {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  
  // Relations
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId             String
  post               SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

// Comment model
model Comment {
  id                 String    @id @default(uuid())
  content            String    @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relations
  postId             String
  post               SocialPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId           String
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId           String?   // For nested comments
  parent             Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies            Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

// Reaction model for likes, hearts, etc.
model Reaction {
  id                 String        @id @default(uuid())
  type               ReactionType
  createdAt          DateTime      @default(now())
  
  // Relations
  postId             String
  post               SocialPost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId             String
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

// Follow relation between users
model Follow {
  id                 String    @id @default(uuid())
  createdAt          DateTime  @default(now())
  
  // Relations
  followerId         String
  follower           User      @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId        String
  following          User      @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Medical record for pets
model MedicalRecord {
  id                 String    @id @default(uuid())
  title              String
  description        String    @db.Text
  date               DateTime
  documentUrl        String?   // URL to stored document
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Verification fields
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  rejectionReason    String?   @db.Text
  
  // Relations
  petProfileId       String
  petProfile         PetProfile @relation(fields: [petProfileId], references: [id], onDelete: Cascade)
  verifiedById       String?   // ID of vet/admin who verified
  verifiedBy         User?     @relation(fields: [verifiedById], references: [id], onDelete: SetNull)
  
  @@index([petProfileId])
  @@index([verifiedById])
}

// Verification documents uploaded by users
model VerificationDocument {
  id                 String         @id @default(uuid())
  documentType       DocumentType
  status             VerificationStatus @default(PENDING)
  rejectionReason    String?        @db.Text
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  // Relations
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedById       String?        // ID of admin/vet who verified
 
 
  @@index([userId])
  VerificationDocumentFile VerificationDocumentFile[]
}

model VerificationDocumentFile {
  id                 String         @id @default(uuid())
  documentUrl        String         // URL to stored document
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  verificationDocumentId String
  verificationDocument VerificationDocument @relation(fields: [verificationDocumentId], references: [id], onDelete: Cascade)
}


// User verification status
model UserVerification {
  id                 String         @id @default(uuid())
  verificationLevel  VerificationLevel
  verifiedAt         DateTime       @default(now())
  
  // Relations
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedById       String?        // ID of admin/vet who verified

  @@index([userId])
}

// Adoption application
model AdoptionApplication {
  id                 String         @id @default(uuid())
  status             ApplicationStatus @default(PENDING)
  message            String         @db.Text
  rejectionReason    String?        @db.Text
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  // Relations
  adoptionPostId     String
  adoptionPost       PetAdoptionPost @relation(fields: [adoptionPostId], references: [id], onDelete: Cascade)
  applicantId        String
  applicant          User           @relation("applicant", fields: [applicantId], references: [id], onDelete: Cascade)
  petOwnerId         String
  petOwner           User           @relation("petOwner", fields: [petOwnerId], references: [id], onDelete: Cascade)

  @@index([adoptionPostId])
  @@index([applicantId])
  @@index([petOwnerId])
}

// Chat model for real-time messaging
model Chat {
  id                 String           @id @default(uuid())
  name               String?
  isGroup            Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  // Relations
  ownerId            String
  owner              User             @relation("chatOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  participants       ChatParticipant[]
  messages           Message[]
  chatFiles          ChatFile[]
  @@index([ownerId])

}

model ChatFile {
  id                 String    @id @default(uuid())
  fileUrl            String
  chatId             String
  chat               Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  messageId          String?   @unique
  message            Message?  @relation(fields: [messageId], references: [id], onDelete: SetNull)

  @@index([chatId])
}

// Chat participants
model ChatParticipant {
  id                 String    @id @default(uuid())
  joinedAt           DateTime  @default(now())
  
  // Relations
  chatId             String
  chat               Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastReadMessageId  String?

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

// Message model
model Message {
  id                 String    @id @default(uuid())
  content            String    @db.Text
  isRead             Boolean   @default(false)
  createdAt          DateTime  @default(now())
  
  // Relations
  chatId             String
  chat               Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId           String
  sender             User      @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId         String
  receiver           User      @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  chatFile           ChatFile?

  @@index([chatId])
  @@index([senderId])
  @@index([receiverId])
}

// Notification model
model Notification {
  id                 String           @id @default(uuid())
  type               NotificationType
  message            String
  isRead             Boolean          @default(false)
  entityId           String?          // ID of related entity (post, comment, etc.)
  entityType         String?          // Type of related entity
  createdAt          DateTime         @default(now())
  
  // Relations
  receiverId         String
  receiver           User             @relation("notificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId           String?
  sender             User?            @relation("notificationSender", fields: [senderId], references: [id], onDelete: SetNull)

  @@index([receiverId])
  @@index([senderId])
}

// Enums
enum UserRole {
  USER
  VET
  ADMIN 
}

enum VerificationLevel {
  BASIC          // Email verified
  VERIFIED       // ID verified
  PURRPARENT     // Verified pet owner
  SUPER_ADOPTER  // Proven adopter with good history
  VET            // Verified veterinarian
}

enum PetSpecies {
  DOG
  CAT
  BIRD
  RABBIT
  HAMSTER
  GUINEA_PIG
  FISH
  REPTILE
  OTHER
}

enum PetGender {
  MALE
  FEMALE
  UNKNOWN
}

enum PetSize {
  EXTRA_SMALL
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum DocumentType {
  ID_CARD
  DRIVERS_LICENSE
  PASSPORT
  PROOF_OF_ADDRESS
  VET_LICENSE
  PET_MEDICAL_RECORD
  ADOPTION_FORM
  OTHER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
  COMPLETED
}

enum ReactionType {
  LIKE
  LOVE
  CARE
  LAUGH
  SAD
  ANGRY
  WOW
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MESSAGE
  PET_APPLICATION
  APPLICATION_UPDATE
  VERIFICATION
  SYSTEM
}

// New enum for product categories
enum ProductCategory {
  FOOD
  TOY
  MEDICATION
  SUPPLEMENT
  GROOMING
  ACCESSORY
  BED
  CAGE
  AQUARIUM
  CLOTHING
  OTHER
}

// Vet Document model for veterinarian specific documentation
model VetDocument {
  id                 String         @id @default(uuid())
  documentType       VetDocumentType
  documentUrl        String         // URL to stored document
  status             VerificationStatus @default(PENDING)
  issueDate          DateTime?
  expiryDate         DateTime?
  issuingAuthority   String?
  licenseNumber      String?
  specialization     String?
  rejectionReason    String?        @db.Text
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  
  // Relations
  userId             String
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// New enum for vet document types
enum VetDocumentType {
  VETERINARY_DEGREE
  PRACTICE_LICENSE
  BOARD_CERTIFICATION
  CONTINUING_EDUCATION
  SPECIALTY_CERTIFICATION
  CLINIC_REGISTRATION
  INSURANCE_DOCUMENT
  REFERENCE_LETTER
  PROFESSIONAL_MEMBERSHIP
  OTHER
}




